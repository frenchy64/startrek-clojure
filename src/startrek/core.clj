(ns startrek.core
  {:lang :core.typed
   ;:core.typed {:features #{:runtime-infer}}
   }
   (:require [clojure.java.io :as io]
             [clojure.edn :as edn]
             [clojure.data.generators :as gen]
             [startrek.random :as r]
             [startrek.utils :as u]
             [startrek.klingon :as k]
             [startrek.enterprise :as e]
             [startrek.world :as w]
             [startrek.nav :as n]
             [startrek.computer :as c]
             [clojure.core.typed :as t]
             [clojure.spec :as s])
   (:gen-class :main true))

;; Start: Generated by clojure.core.typed - DO NOT EDIT
(declare
  BasesKlingonsQuadrantMap
  ComputerDisplayDamageControlLongRangeSensorsMap
  CurrentEndStartMap
  CurrentKlingonsCurrentSectorEnterpriseMap
  EnergyIsDockedQuadrantMap
  EnergySectorMap
  PageMap)
(t/defalias
  BasesKlingonsQuadrantMap
  '{:bases t/Int,
    :klingons t/Int,
    :quadrant '[t/Int t/Int],
    :stars t/Int})
(t/defalias
  ComputerDisplayDamageControlLongRangeSensorsMap
  '{:computer_display t/Int,
    :damage_control t/Int,
    :long_range_sensors t/Int,
    :phasers t/Int,
    :photon_torpedo_tubes t/Int,
    :shields t/Int,
    :short_range_sensors t/Int,
    :warp_engines t/Int})
(t/defalias
  CurrentEndStartMap
  '{:current t/Int, :end t/Int, :start t/Int})
(t/defalias
  CurrentKlingonsCurrentSectorEnterpriseMap
  (t/HMap
    :mandatory
    {:current-klingons (t/Vec EnergySectorMap),
     :current-sector (t/Vec t/Int),
     :enterprise EnergyIsDockedQuadrantMap,
     :quads (t/Vec BasesKlingonsQuadrantMap),
     :stardate CurrentEndStartMap,
     :starting-klingons t/Int}
    :optional
    {:lrs-history (t/Vec t/Str)}))
(t/defalias
  EnergyIsDockedQuadrantMap
  (t/HMap
    :mandatory
    {:energy t/Int,
     :is_docked false,
     :quadrant '[t/Int t/Int],
     :sector '[t/Int t/Int],
     :shields t/Num}
    :optional
    {:damage ComputerDisplayDamageControlLongRangeSensorsMap,
     :photon_torpedoes t/Int}))
(t/defalias EnergySectorMap '{:energy t/Int, :sector '[t/Int t/Int]})
(t/defalias PageMap '{:page t/Str})
(t/ann
  clojure.edn/read-string
  [t/Str :-> '[PageMap PageMap PageMap PageMap]])
(t/ann clojure.java.io/resource [t/Str :-> java.net.URL])
(t/ann -main [t/Any * :-> nil])
(t/ann command-help [:-> nil])
(t/ann
  game-over-destroyed
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap) :-> Boolean])
(t/ann game-over-out-of-time
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap) :-> Boolean])
(t/ann
  game-over-powerless
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap) :-> Boolean])
(t/ann game-over-success
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap) :-> t/Any])
(t/ann
  game-over?
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap) :-> t/Any])
(t/ann
  game-state
  (t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap))
(t/ann library-computer [-> t/Any])
(t/ann ^:no-check pages (t/Coll t/Str))
(t/ann parse-number [t/Str :-> t/Int])
(t/ann play-game [:-> nil])
(t/ann print-instructions [t/Int :-> nil])
(t/ann user-input [:-> t/Int])
(t/ann
  startrek.computer/computer-command
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)
   :->
   t/Any])
(t/ann
  startrek.enterprise/damage-control-report-command
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)
   :->
   t/Any])
(t/ann
  startrek.enterprise/fire-phasers-command
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)
   :->
   t/Any])
(t/ann
  startrek.enterprise/fire-torpedoes-command
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)
   :->
   (t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)])
(t/ann
  startrek.enterprise/shield-control-command
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)
   :->
   (t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)])
(t/ann
  startrek.klingon/klingon-turn
  [EnergyIsDockedQuadrantMap
   (t/Vec EnergySectorMap)
   :->
   EnergyIsDockedQuadrantMap])
(t/ann
  startrek.nav/set-course-command
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)
   :->
   t/Any])
(t/ann
  startrek.nav/enter-quadrant
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)
   :->
   CurrentKlingonsCurrentSectorEnterpriseMap])
(t/ann
  startrek.utils/message
  (t/IFn
    [:-> (t/U nil (t/Vec (t/U nil t/Str)))]
    [t/Str :-> (t/U nil (t/Vec (t/U nil t/Str)))]))
(t/ann
  startrek.world/long-range-scan-command
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap) :-> nil])
(t/ann
  startrek.world/reset-game-state!
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)
   :->
   CurrentKlingonsCurrentSectorEnterpriseMap])
(t/ann
  startrek.world/new-game-state
  [:-> (t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap)])
(t/ann
  startrek.world/remaining-klingon-count
  [(t/Vec BasesKlingonsQuadrantMap) :-> t/Int])
(t/ann
  startrek.world/short-range-scan-command
  [(t/Atom1 CurrentKlingonsCurrentSectorEnterpriseMap) :-> nil])
(t/ann
  clojure.data.generators/*rnd* java.util.Random)
;; End: Generated by clojure.core.typed - DO NOT EDIT
(def game-state (w/new-game-state))

(def pages
  (->>  "instructions.edn"
       io/resource
       slurp
       edn/read-string
       (map :page)))

(defn parse-number
  "Reads a number from a string. Returns nil if not a number."
  [s]
  {:post [(integer? %)]}
  (if (re-find #"^-?\d+\.?\d*$" s)
    (read-string s)
    (let [s2 (str "0" s)]
      (if (re-find #"^-?\d+\.?\d*$" s2)
        (read-string s2)))))

(defn print-instructions [pause]
  (loop [^{::t/ann (t/Coll t/Str)} p pages]
    (when (seq p)
      (println (first p))
      (when (= pause 2)
        (println "PRESS A KEY TO CONTINUE...  ")
        ; (let  [cr  (ConsoleReader.)
        ;        keyint  (.readCharacter cr)]
        ;       (print keyint))

        ; (let  [term  (Terminal/getTerminal)]
        ;   (println  (char(.readCharacter term System/in)))))
      (recur (rest p))))))

(defn library-computer []
  (println "library computer"))

(defn game-over-out-of-time [game-state]
  (u/message)
  (u/message (format "IT IS STARDATE %d" (get-in @game-state [:stardate :current])))
  (u/message (format "THERE ARE STILL %d KLINGON BATTLE CRUISERS" (w/remaining-klingon-count (:quads @game-state))))
  true)

(defn game-over-destroyed [game-state]
  (u/message)
  (u/message "THE ENTERPRISE HAS BEEN DESTROYED. THE FEDERATION WILL BE CONQUERED")
  (u/message (format "THERE ARE STILL %d KLINGON BATTLE CRUISERS" (w/remaining-klingon-count (:quads @game-state))))
  true)

(defn game-over-powerless [game-state]
  (u/message "THE ENTERPRISE IS DEAD IN SPACE. IF YOU SURVIVE ALL IMPENDING")
  (u/message "ATTACK YOU WILL BE DEMOTED TO THE RANK OF PRIVATE")
  (let [enterprise (k/klingon-turn (get @game-state :enterprise) (get @game-state :current-klingons))]
    (if (neg? (get enterprise :shields))
      (game-over-destroyed game-state)
      (u/message (format "THERE ARE STILL %d KLINGON BATTLE CRUISERS" 
                       (w/remaining-klingon-count (:quads @game-state))))))
  true)

(defn game-over-success [game-state]
  (u/message)
  (u/message "THE LAST KLINGON BATTLE CRUISER IN THE GALAXY HAS BEEN DESTROYED")
  (u/message "THE FEDERATION HAS BEEN SAVED !!!")
  (u/message)
  (let [k (get @game-state :starting-klingons)
        start (-> @game-state :stardate :start)
        current (-> @game-state :stardate :current)]
    (u/message (format "YOUR EFFICIENCY RATING = %5.2f" (* 1000.0 (/ k (- current start)))))))

(defn game-over? [game-state]
  (cond
    (neg? (-> @game-state :enterprise :shields)) (game-over-destroyed game-state)
    (and (<= (-> @game-state :enterprise :shields) 1)
         (zero? (-> @game-state :enterprise :energy))) (game-over-powerless game-state)
    (zero? (w/remaining-klingon-count (:quads @game-state))) (game-over-success game-state)
    (> (-> @game-state :stardate :current)
       (+ (-> @game-state :stardate :start)
          (-> @game-state :stardate :end))) (game-over-out-of-time game-state)
    :else false))

(defn command-help []
  (println)
  (println "   0 = SET COURSE")
  (println "   1 = SHORT RANGE SENSOR SCAN")
  (println "   2 = LONG RANGE SENSOR SCAN")
  (println "   3 = FIRE PHASERS")
  (println "   4 = FIRE PHOTON TORPEDOES")
  (println "   5 = SHIELD CONTROL")
  (println "   6 = DAMAGE CONTROL REPORT")
  (println "   7 = CALL ON LIBRARY COMPUTER")
  (println))

(defn user-input []
  (parse-number (t/cast String (read-line))))

(defn play-game 
  "The main game loop. When you quit out, the game shuts down. Otherwise a new game starts
  immediately after the old one was finished."
  []
  (w/reset-game-state! game-state)
  (n/enter-quadrant game-state)
  (let [stop-condition (t/ref :- Boolean false)]
    (while (not (deref stop-condition))
      ; check to see if the Enterprise is destroyed
      (if (game-over? game-state)
        (do
          (w/reset-game-state! game-state)
          (n/enter-quadrant game-state))
        (do
          (w/short-range-scan-command game-state)

          (println "COMMAND")
          (let [choice (read-line)]
            (condp = choice
              "0" (n/set-course-command game-state)
              "1" (w/short-range-scan-command game-state)
              "2" (w/long-range-scan-command game-state)
              "3" (e/fire-phasers-command game-state)
              "4" (e/fire-torpedoes-command game-state)
              "5" (e/shield-control-command game-state)
              "6" (e/damage-control-report-command game-state)
              "7" (c/computer-command game-state)
              "q" (dosync (alter stop-condition (t/ann-form
                                                  (fn [_] true)
                                                  [Boolean :-> Boolean])
                                                ))
              (command-help)
              )))))))

(defn -main [& args]
  (dotimes [^{::t/ann t/Int} i 20]
    (println))
  (println "                          STAR TREK ")
  (println)
  (println)
  (println)
  (println "ENTER 1 OR 2 FOR INSTRUCTIONS (ENTER 2 TO PAGE) ")
  (let [choice (parse-number (t/cast String (read-line)))]
    (if (or (= choice 1) (= choice 2))
      (print-instructions choice)))

  ; This is unsafe if the user does not provide an int
  ; for a seed. Need to fix that.
  (println)
  (println "ENTER SEED NUMBER ")
  (let [seed (parse-number (t/cast String (read-line)))]
    (binding  [gen/*rnd*  (java.util.Random. (long seed))])

(t/tc-ignore ;; TODO waiting on core.typed support for with-redefs
    (with-redefs [u/message println
                  n/pick-course user-input
                  n/pick-warp-factor user-input
                  e/pick-phaser-power user-input
                  e/pick-torpedo-course user-input
                  e/pick-shield-power user-input 
                  c/pick-computer-command  user-input 
                  c/pick-coordinate  user-input 
                  ]
    (play-game)))
    nil))

(comment
  (defn play-the-game []
    (let [rdr 
          (clojure.lang.LineNumberingPushbackReader.
            (java.io.StringReader.
              (str (apply str
                          (interpose
                            "\n"
                            (cons 1
                                  (repeatedly 30 #(rand-int 3)))))
                   ;; might invoke a NPE, but it usually
                   ;; guarantees the game ends.
                   "q\n")))]
      (binding [*in* rdr]
        (-main))))
  )
